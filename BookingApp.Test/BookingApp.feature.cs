// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BookingApp.Test
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class BookingAppFeature : Xunit.IClassFixture<BookingAppFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "BookingApp.feature"
#line hidden
        
        public BookingAppFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BookingApp", "\t\t In order to check the booking functionality\r\n\t\t We will create bookings", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void SetFixture(BookingAppFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="Make a booking for two people")]
        [Xunit.TraitAttribute("FeatureTitle", "BookingApp")]
        [Xunit.TraitAttribute("Description", "Make a booking for two people")]
        [Xunit.TraitAttribute("Category", "mytag")]
        public virtual void MakeABookingForTwoPeople()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Make a booking for two people", new string[] {
                        "mytag"});
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("The the customer has created a booking for 2 people", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
 testRunner.When("they confirm with no credit card", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 9
 testRunner.Then("the customer should get a confirmation email", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Make a booking for 1 person")]
        [Xunit.TraitAttribute("FeatureTitle", "BookingApp")]
        [Xunit.TraitAttribute("Description", "Make a booking for 1 person")]
        [Xunit.TraitAttribute("Category", "mytag")]
        public virtual void MakeABookingFor1Person()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Make a booking for 1 person", new string[] {
                        "mytag"});
#line 12
this.ScenarioSetup(scenarioInfo);
#line 13
 testRunner.Given("The the customer has created a booking for 1 people", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 14
 testRunner.Then("the customer should get a not enough people error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Make a booking outside work hours")]
        [Xunit.TraitAttribute("FeatureTitle", "BookingApp")]
        [Xunit.TraitAttribute("Description", "Make a booking outside work hours")]
        [Xunit.TraitAttribute("Category", "mytag")]
        public virtual void MakeABookingOutsideWorkHours()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Make a booking outside work hours", new string[] {
                        "mytag"});
#line 17
this.ScenarioSetup(scenarioInfo);
#line 18
 testRunner.Given("The the customer has created a booking outside work hours", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 19
 testRunner.Then("the customer should get an outside work hours error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Make a booking and confirm with credit card")]
        [Xunit.TraitAttribute("FeatureTitle", "BookingApp")]
        [Xunit.TraitAttribute("Description", "Make a booking and confirm with credit card")]
        [Xunit.TraitAttribute("Category", "mytag")]
        public virtual void MakeABookingAndConfirmWithCreditCard()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Make a booking and confirm with credit card", new string[] {
                        "mytag"});
#line 22
this.ScenarioSetup(scenarioInfo);
#line 23
 testRunner.Given("The the customer has created a booking for 10 people", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 24
 testRunner.When("they confirm with credit card of ABC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 25
 testRunner.Then("the customer should get a confirmation email", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Make a booking for ten people and confirm without credit card")]
        [Xunit.TraitAttribute("FeatureTitle", "BookingApp")]
        [Xunit.TraitAttribute("Description", "Make a booking for ten people and confirm without credit card")]
        [Xunit.TraitAttribute("Category", "mytag")]
        public virtual void MakeABookingForTenPeopleAndConfirmWithoutCreditCard()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Make a booking for ten people and confirm without credit card", new string[] {
                        "mytag"});
#line 28
this.ScenarioSetup(scenarioInfo);
#line 29
 testRunner.Given("The the customer has created a booking for 10 people", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 30
 testRunner.When("they confirm with no credit card", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 31
 testRunner.Then("the customer should get an no credit card error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Make a booking for ten people and confirm with credit card and then cancel")]
        [Xunit.TraitAttribute("FeatureTitle", "BookingApp")]
        [Xunit.TraitAttribute("Description", "Make a booking for ten people and confirm with credit card and then cancel")]
        [Xunit.TraitAttribute("Category", "mytag")]
        public virtual void MakeABookingForTenPeopleAndConfirmWithCreditCardAndThenCancel()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Make a booking for ten people and confirm with credit card and then cancel", new string[] {
                        "mytag"});
#line 34
this.ScenarioSetup(scenarioInfo);
#line 35
 testRunner.Given("The the customer has created a booking for 10 people", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 36
 testRunner.When("they confirm with credit card of ABC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 37
 testRunner.And("they cancel the booking", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 38
 testRunner.Then("the customer should be charged 200 dollars", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Make a booking for ten people with dietary requirement and confirm with credit ca" +
            "rd and then cancel")]
        [Xunit.TraitAttribute("FeatureTitle", "BookingApp")]
        [Xunit.TraitAttribute("Description", "Make a booking for ten people with dietary requirement and confirm with credit ca" +
            "rd and then cancel")]
        [Xunit.TraitAttribute("Category", "mytag")]
        public virtual void MakeABookingForTenPeopleWithDietaryRequirementAndConfirmWithCreditCardAndThenCancel()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Make a booking for ten people with dietary requirement and confirm with credit ca" +
                    "rd and then cancel", new string[] {
                        "mytag"});
#line 41
this.ScenarioSetup(scenarioInfo);
#line 42
 testRunner.Given("The the customer has created a booking for 10 people", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 43
 testRunner.And("The booking has dietary requirements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 44
 testRunner.When("they confirm with credit card of ABC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 45
 testRunner.And("they cancel the booking", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 46
 testRunner.Then("the customer should be charged 225 dollars", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                BookingAppFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                BookingAppFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
